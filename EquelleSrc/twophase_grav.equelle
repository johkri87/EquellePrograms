# Two-phase flow with no-flow boundary and simple source terms.

# Physics that requires specification
perm : Collection Of Scalar On AllCells()
perm = InputCollectionOfScalar("perm", AllCells())
poro : Collection Of Scalar On AllCells()
poro = InputCollectionOfScalar("poro", AllCells())
watervisc = InputScalarWithDefault("watervisc", 0.0005)
oilvisc = InputScalarWithDefault("oilvisc", 0.005)
waterdensity = InputScalarWithDefault("waterdensity", 1000.0)
oildensity = InputScalarWithDefault("oildensity", 750.0)
gravity = InputScalarWithDefault("gravity", 9.82)

# Constants
pv = poro * |AllCells()|
cell_depths = Centroid(AllCells())[1] # y coordinate for 2d grids.
zdiff = Gradient(cell_depths)

# Computing transmissibilities. Note: we should check algorithm agains MRST and OPM.
computeTransmissibilities : Function(permeability : Collection Of Scalar On AllCells()) -> Collection Of Scalar On InteriorFaces()
computeTransmissibilities(permeability) = {
    interior_faces = InteriorFaces()
    first = FirstCell(interior_faces)
    second = SecondCell(interior_faces)
    cdiff1 = Centroid(first) - Centroid(interior_faces)
    cdiff2 = Centroid(second) - Centroid(interior_faces)
    p1 = permeability On first
    p2 = permeability On second
    a = |interior_faces|
    halftrans1 = - a * p1 * Dot(Normal(interior_faces), cdiff1) / Dot(cdiff1, cdiff1)
    halftrans2 = a * p2 * Dot(Normal(interior_faces), cdiff2) / Dot(cdiff2, cdiff2)
    trans = 1.0 / (1.0/halftrans1 + 1.0/halftrans2)
    -> trans
}

# Actually compute transmissibilities.
trans = computeTransmissibilities(perm)

# Upwind selection.
upwind : Function(flux : Collection Of Scalar On InteriorFaces(), ...
                  x    : Collection Of Scalar On AllCells()) ...
                  -> Collection Of Scalar On InteriorFaces()
upwind(flux, x) = {
    x1 = x On FirstCell(InteriorFaces())
    x2 = x On SecondCell(InteriorFaces())
    -> flux >= 0.0 ? x1 : x2
}

# Water mobility
computeWaterMob : Function(sw : Collection Of Scalar On AllCells()) ...
                           -> Collection Of Scalar On AllCells()
computeWaterMob(sw) = {
    krw = sw
    -> krw / watervisc
}

# Oil mobility
computeOilMob : Function(sw : Collection Of Scalar On AllCells()) ...
                         -> Collection Of Scalar On AllCells()
computeOilMob(sw) = {
    kro = (1.0 Extend AllCells()) - sw
    -> kro / oilvisc
}



# Total flux with gravity.
fluxWithGrav : Function(pressure : Collection Of Scalar On AllCells(), ...
                        sw : Collection Of Scalar On AllCells()) ...
                        -> Collection Of Scalar On InteriorFaces()
fluxWithGrav(pressure, sw) = {
    ngradp = -Gradient(pressure)
    Output("ngradp", ngradp)
    flux_w = ngradp + gravity * waterdensity * zdiff
    flux_o = ngradp + gravity * oildensity * zdiff
    Output("flux_o", flux_o)
    Output("swinflux", sw)
    face_mob_w = upwind(flux_w, computeWaterMob(sw))
    face_mob_o = upwind(flux_o, computeOilMob(sw))
    Output("face_mob_o", face_mob_o)
    face_total_mobility = face_mob_w + face_mob_o
    Output("ftm", face_total_mobility)
    omega = (face_mob_w * waterdensity + face_mob_o * oildensity) / face_total_mobility
    -> trans * face_total_mobility * (ngradp + gravity * omega * zdiff)
}


# Pressure residual
computePressureResidual : Function(pressure : Collection Of Scalar On AllCells(), ...
                                   sw : Collection Of Scalar On AllCells(), ...
                                   source : Collection Of Scalar On AllCells()) ...
                                   -> Collection Of Scalar On AllCells()
computePressureResidual(pressure, sw, source) = {
    flux = fluxWithGrav(pressure, sw)
    Output("fluxinres", flux)
    -> Divergence(flux) - source
}

# Transport residual
computeTransportResidual : Function(sw : Collection Of Scalar On AllCells(), ...
                                    sw0 : Collection Of Scalar On AllCells(), ...
                                    flux : Collection Of Scalar On InteriorFaces(), ...
                                    source : Collection Of Scalar On AllCells(), ...
                                    insource_sw : Collection Of Scalar On AllCells(), ...
                                    dt : Scalar) ...
                                    -> Collection Of Scalar On AllCells()
computeTransportResidual(sw, sw0, flux, source, insource_sw, dt) = {
    insource = source > 0.0 ? source : 0.0 Extend AllCells()
    outsource = source < 0.0 ? source : 0.0 Extend AllCells()
    mw = computeWaterMob(sw)
    mo = computeOilMob(sw)
    fracflow = mw / (mw + mo)
    face_fracflow = upwind(flux, fracflow)
    water_flux = face_fracflow * flux
    q = insource * insource_sw + outsource * fracflow
    -> sw - sw0 + (dt/pv) * (Divergence(water_flux) - q)
}

# Initialise state variables.
timesteps = InputSequenceOfScalar("timesteps")
sw_initial = InputCollectionOfScalar("sw_initial", AllCells())
source_cells = InputDomainSubsetOf("source_cells", AllCells())
source_values = InputCollectionOfScalar("source_values", source_cells)
source = source_values Extend AllCells()
insource_sw = 1.0 Extend AllCells()
sw0 : Mutable Collection Of Scalar On AllCells()
sw0 = sw_initial
p0 : Mutable Collection Of Scalar On AllCells()
p0 = 0.0 Extend AllCells()

# Output initial solution
Output("pressure", p0)
Output("saturation", sw0)


# Main timestepping loop.
For dt In timesteps {
    pressureResLocal : Function(pressure : Collection Of Scalar On AllCells()) -> Collection Of Scalar On AllCells()
    pressureResLocal(pressure) = {
        -> computePressureResidual(pressure, sw0, source)
    }
    p = NewtonSolve(pressureResLocal, p0)
    flux = fluxWithGrav(p, sw0)

    # Compute saturation.
    transportResLocal : Function(sw : Collection Of Scalar On AllCells()) -> Collection Of Scalar On AllCells()
    transportResLocal(sw) = {
        -> computeTransportResidual(sw, sw0, flux, source, insource_sw, dt)
    }
    sw = NewtonSolve(transportResLocal, 0.5 Extend AllCells())

    # Update state variables
    p0 = p
    sw0 = sw

    # Output new solution
    Output("pressure", p0)
    Output("flux", flux)
    Output("saturation", sw0)
}
































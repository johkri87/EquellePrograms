# Constants. Note: only lowercase initial letters!
# Specific gas constant for dry air.
rsp = 287.058 [Joule / (Kilogram * Kelvin)]
# Assume constant temperature
temp = 290 [Kelvin]
# Permeability
perm = 1 [Darcy]
# Approximately correct for dry air at 290 K.
viscosity = 18.27 [Micro * Pascal * Second]
mobility = 1 / viscosity

# Input source terms and time steps.
q = InputCollectionOfScalar("source", AllCells()) * 1 [Kilogram/Second]
timesteps = InputSequenceOfScalar("timesteps") * 1 [Second]

# Initial pressure (3000000 Pa ~= 30 atm)
p_initial = (3000000 [Pascal]) Extend AllCells()

# Useful shortcuts/aliases
intf = InteriorFaces()
f = FirstCell(intf)
s = SecondCell(intf)
area = |intf|
vol = |AllCells()|

# Compute transmissibilities
d1 = Centroid(f) - Centroid(intf)
d2 = Centroid(s) - Centroid(intf)
h1 = - area * perm * Dot(Normal(intf), d1) / Dot(d1, d1)
h2 =   area * perm * Dot(Normal(intf), d2) / Dot(d2, d2)
trans = 1.0 / (1.0/h1 + 1.0/h2)

# Function for computing density from pressure
density(p) = {
    -> p / (rsp * temp)
}

# Residual equation
residual(p, p0, dt) = {
    v = mobility * trans * ((p On f) - (p On s))
    rho = density(p)
    rho0 = density(p0)
    rho_face = ((rho On f) + (rho On s)) / 2
    res = (vol/dt) * (rho - rho0) + Divergence(v * rho_face) - q
    -> res
}

# Declare variable that will change in time loop. It must
# be declared Mutable, to allow repeated assignment.
p0 : Mutable Collection Of Scalar On AllCells()
p0 = p_initial

# Timestepping loop
For dt In timesteps {
    # Define local residual function that only takes the
    # primary variable as argument.
    locRes(p) = {
        -> residual(p, p0, dt)
    }

    # Solve equation implicitly, with previous pressure as
    # initial guess for Newton solver.
    p = NewtonSolve(locRes, p0)

    # Output 
    Output("pressure", p)

    # Update initial pressure for next timestep.
    p0 = p
}
